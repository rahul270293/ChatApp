#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chaton:server');
var http = require('http');
const socketIO = require('socket.io');
const {generateMessage,generateLocationMessage }=require('../controller/message')
const { isRealString } = require('../controller/validation')
const { Users } = require('../controller/users')


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// var io= socketIO('server');
// io.on('connection',(socket)=>{
//   console.log('New use connected')
// })
var io = socketIO(server);
var users = new Users(); 

io.on('connection', (socket) =>{
  console.log('New user connected');

  


  socket.on('join',(params, callback)=>{
   if(!isRealString(params.name) || !isRealString(params.room) ){
     return callback('Name and room are required')
   }
   socket.join(params.room);
   users.removeUser(socket.id);
   users.addUser(socket.id, params.name, params.room)


   //socket.leave('The office fans')
   // io.emit -> io.to('The office  fans').emit
   //socket.broadcast.emit-> socket.broadcast.to('The Office Fans').emit
   //socket.emit
   io.to(params.room).emit('updateUserList', users.getUserList(params.room));
   socket.emit('newMessage', generateMessage('Admin','Welcome to the ChatApp'));
   socket.broadcast.to(params.room).emit('newMessage',generateMessage('Admin', `${params.name} has joined. `));

  })

  socket.on('createMessage',(message, callback)=>{
    var user = users.getUser(socket.id);

    if(user && isRealString(message.text)){
      io.to(user.room).emit('newMessage',generateMessage(user.name, message.text))
    }
   
    callback();
    
  });

  socket.on('createLocationMessage', (coords)=>{
    var user = users.getUser(socket.id)

    if(user){
      io.to(user.room).emit('newLocationMessage',generateLocationMessage(user.name, coords.latitude, coords.longitude))
    }

    
  })

  socket.on('disconnect',()=> {
    var user = users.removeUser(socket.id)
    
    if(user){
      io.to(user.room).emit('updateUserList', users.getUserList(user.room))
      io.to(user.room).emit('newMessage', generateMessage('Admin', `${user.name} has left.`))
    } 
  })
 })

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
